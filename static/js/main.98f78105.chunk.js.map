{"version":3,"sources":["logo.svg","NavBar.jsx","Contact.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","bg","expand","Brand","href","src","logo","width","height","className","alt","Toggle","aria-controls","Collapse","id","Nav","Link","Button","variant","Contact","Container","Card","body","Title","Form","Group","Row","Col","Label","Control","placeholder","controlId","type","Text","Check","label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,sLCM5B,SAASC,IACpB,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SACnB,yBACIC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPC,UAAU,2BACVC,IAAI,cAGR,kBAACV,EAAA,EAAOW,OAAR,CAAeC,gBAAc,qBAC7B,kBAACZ,EAAA,EAAOa,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKN,UAAU,mBACX,kBAACM,EAAA,EAAIC,KAAL,CAAUZ,KAAK,UAAf,SACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,KAAK,YAAf,WACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,KAAK,SAAf,QACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,KAAK,gBAAf,eACA,kBAACW,EAAA,EAAIC,KAAL,CAAUZ,KAAK,YAAf,YAEJ,kBAACa,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,Y,2CCnBD,SAASC,IACpB,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACD,EAAA,EAAKE,MAAN,mBACA,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAKI,MAAN,8BACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,YAAY,gBAE9B,kBAACH,EAAA,EAAD,KACI,kBAACH,EAAA,EAAKI,MAAN,kBACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcC,YAAY,iBAKtC,kBAACN,EAAA,EAAKC,MAAN,CAAYM,UAAU,kBAClB,kBAACP,EAAA,EAAKI,MAAN,sBACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcG,KAAK,QAAQF,YAAY,gBACvC,kBAACN,EAAA,EAAKS,KAAN,CAAWxB,UAAU,cAArB,mDAKJ,kBAACe,EAAA,EAAKC,MAAN,CAAYM,UAAU,qBAClB,kBAACP,EAAA,EAAKI,MAAN,gBACA,kBAACJ,EAAA,EAAKK,QAAN,CAAcG,KAAK,OAAOF,YAAY,sBAE1C,kBAACN,EAAA,EAAKC,MAAN,CAAYM,UAAU,qBAClB,kBAACP,EAAA,EAAKU,MAAN,CAAYF,KAAK,WAAWG,MAAM,kBAEtC,kBAAClB,EAAA,EAAD,CAAQC,QAAQ,UAAUc,KAAK,UAA/B,aCtCL,SAASI,IACpB,OACI,yBAAK3B,UAAU,OACX,6BACI,kBAACV,EAAD,OAGJ,4BAAQU,UAAU,eAGlB,iCACI,kBAACU,EAAD,QCHIkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACR,EAAD,OAEFS,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.98f78105.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.427d05ae.svg\";","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button'\nimport logo from \"./logo.svg\";\n\nexport default function NavBar () {\n    return(\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#home\">\n            <img\n                src={logo}\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n                alt=\"ume logo\"\n            />\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto ml-auto\">\n                    <Nav.Link href=\"#about\">About</Nav.Link>\n                    <Nav.Link href=\"#product\">Product</Nav.Link>\n                    <Nav.Link href=\"#team\">Team</Nav.Link>\n                    <Nav.Link href=\"#recognition\">Recognition</Nav.Link>\n                    <Nav.Link href=\"#contact\">Contact</Nav.Link>\n                </Nav>\n                <Button variant=\"outline-primary\">Log in</Button>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Card from 'react-bootstrap/Card'\n\nexport default function Contact () {\n    return(\n        <Container>\n            <Card body>\n                <Card.Title>Contact us</Card.Title>\n                <Form>\n                    <Form.Group>\n                        <Row>\n                            <Col>\n                                <Form.Label>First Name (Optional)</Form.Label>\n                                <Form.Control placeholder=\"First name\" />\n                            </Col>\n                            <Col>\n                                <Form.Label>Last Name</Form.Label>\n                                <Form.Control placeholder=\"Last name\" />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                    \n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"Enter email\" />\n                        <Form.Text className=\"text-muted\">\n                            We'll never share your email with anyone else.\n                        </Form.Text>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Message</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Ask us something\" />\n                    </Form.Group>\n                    <Form.Group controlId=\"formBasicCheckbox\">\n                        <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </Card>\n        </Container>\n    );\n}","import React from 'react';\nimport NavBar from './NavBar'\nimport Contact from './Contact'\n\nexport default function App() {\n    return (\n        <div className=\"App\">\n            <nav>\n                <NavBar />\n            </nav>\n\n            <header className=\"App-header\">\n\n            </header>\n            <section>\n                <Contact />\n            </section>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}